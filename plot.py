import numpy as np
import matplotlib.pyplot as plt
import random
import torch

c = [0.0168, 0.1970, 0.1064, 0.0775, 0.0828, 0.0154, 0.0412, 0.1178, 0.0859,
       0.1793, 0.1327, 0.1043, 0.1377, 0.2248, 0.0880, 0.0869, 0.0484,0.0189, 0.2643, 0.0962, 0.0665, 0.1055, 0.0201, 0.0733, 0.1569, 0.0832,
        0.2178, 0.1882, 0.1841, 0.1570, 0.3463, 0.1118, 0.1254, 0.0609,0.0172, 0.1409, 0.1298, 0.0598, 0.0923, 0.0179, 0.0425, 0.1375, 0.1142,
        0.1659, 0.1278, 0.1320, 0.1909, 0.2120, 0.0994, 0.0803, 0.0374,0.0153, 0.1835, 0.0690, 0.0688, 0.0799, 0.0173, 0.0527, 0.1034, 0.0755,
        0.1760, 0.1203, 0.1074, 0.0734, 0.2114, 0.1041, 0.0858, 0.0428,0.0198, 0.2429, 0.1114, 0.0750, 0.1121, 0.0196, 0.0724, 0.1614, 0.1121,
        0.2140, 0.1872, 0.1919, 0.1742, 0.3346, 0.1093, 0.1258, 0.0594,0.0085, 0.0044, 0.0469, 0.0217, 0.0180, 0.0119, 0.0059, 0.0049, 0.0248,
        0.0099, 0.0060, 0.0095, 0.0257, 0.0233, 0.0632, 0.0058, 0.0288,0.0117, 0.0744, 0.0938, 0.0432, 0.0623, 0.0175, 0.0272, 0.0669, 0.0655,
        0.0984, 0.0533, 0.0725, 0.1232, 0.1204, 0.0883, 0.0533, 0.0230,0.0085, 0.0486, 0.0558, 0.0396, 0.0397, 0.0135, 0.0155, 0.0320, 0.0276,
        0.0628, 0.0308, 0.0392, 0.0415, 0.0736, 0.0735, 0.0263, 0.0201,0.0124, 0.1326, 0.0464, 0.0619, 0.0445, 0.0128, 0.0286, 0.0437, 0.0794,
        0.0924, 0.0791, 0.0436, 0.0319, 0.1091, 0.0789, 0.0501, 0.0371,0.0177, 0.2505, 0.0901, 0.0666, 0.0846, 0.0190, 0.0697, 0.1368, 0.0983,
        0.2222, 0.1712, 0.1673, 0.1470, 0.3295, 0.1095, 0.1200, 0.0536,0.0163, 0.1651, 0.1317, 0.0750, 0.0956, 0.0180, 0.0491, 0.1125, 0.1201,
        0.1701, 0.1353, 0.1088, 0.1715, 0.1963, 0.0932, 0.0911, 0.0454,0.0123, 0.1429, 0.0765, 0.0531, 0.0506, 0.0142, 0.0297, 0.0462, 0.0580,
        0.1201, 0.0732, 0.0608, 0.0677, 0.1367, 0.0864, 0.0517, 0.0490,0.0134, 0.1556, 0.0839, 0.0699, 0.0651, 0.0142, 0.0412, 0.0717, 0.0793,
        0.1356, 0.0987, 0.0697, 0.0565, 0.1479, 0.0776, 0.0663, 0.0431,0.0176, 0.1754, 0.0879, 0.0541, 0.0632, 0.0170, 0.0571, 0.1051, 0.0720,
        0.2029, 0.1188, 0.1432, 0.1380, 0.2802, 0.1000, 0.0951, 0.0362,0.0176, 0.1754, 0.0879, 0.0541, 0.0632, 0.0170, 0.0571, 0.1051, 0.0720,
        0.2029, 0.1188, 0.1432, 0.1380, 0.2802, 0.1000, 0.0951, 0.0362,0.0134, 0.1171, 0.0797, 0.0531, 0.0556, 0.0149, 0.0377, 0.0704, 0.0651,
        0.1322, 0.0797, 0.0842, 0.0985, 0.1482, 0.0964, 0.0667, 0.0302,0.0138, 0.0403, 0.1049, 0.0416, 0.0651, 0.0166, 0.0244, 0.0874, 0.0810,
        0.0927, 0.0793, 0.0833, 0.1603, 0.1036, 0.0983, 0.0380, 0.0226,0.0191, 0.2035, 0.1218, 0.0723, 0.1088, 0.0194, 0.0625, 0.1540, 0.1135,
        0.1883, 0.1562, 0.1564, 0.1901, 0.2611, 0.1048, 0.1094, 0.0515,0.0200, 0.2043, 0.1367, 0.0839, 0.1136, 0.0193, 0.0610, 0.1479, 0.1390,
        0.1912, 0.1652, 0.1324, 0.1942, 0.2423, 0.1049, 0.1066, 0.0567,0.0177, 0.1366, 0.1390, 0.0576, 0.0909, 0.0179, 0.0409, 0.1251, 0.0993,
        0.1593, 0.1303, 0.1335, 0.1794, 0.1946, 0.0984, 0.0749, 0.0351,0.0138, 0.1410, 0.0865, 0.0577, 0.0646, 0.0160, 0.0413, 0.0814, 0.0788,
        0.1395, 0.0992, 0.0829, 0.0948, 0.1407, 0.0921, 0.0681, 0.0337,0.0124, 0.1274, 0.0544, 0.0632, 0.0378, 0.0124, 0.0229, 0.0394, 0.0749,
        0.0794, 0.0716, 0.0402, 0.0272, 0.0933, 0.0706, 0.0439, 0.0351,0.0169, 0.1736, 0.0812, 0.0720, 0.0673, 0.0163, 0.0428, 0.0839, 0.0936,
        0.1613, 0.1072, 0.0770, 0.0852, 0.1729, 0.0968, 0.0772, 0.0483,0.0202, 0.2249, 0.1061, 0.0719, 0.0965, 0.0181, 0.0641, 0.1683, 0.1050,
        0.2186, 0.1827, 0.1601, 0.1611, 0.2846, 0.0968, 0.1191, 0.0596,0.0156, 0.1378, 0.1026, 0.0556, 0.0763, 0.0170, 0.0446, 0.1039, 0.0852,
        0.1665, 0.1068, 0.1029, 0.1054, 0.1714, 0.0901, 0.0758, 0.0361,0.0106, 0.0389, 0.0565, 0.0329, 0.0459, 0.0135, 0.0189, 0.0530, 0.0169,
        0.0840, 0.0476, 0.0556, 0.0542, 0.0829, 0.0839, 0.0252, 0.0198,0.0135, 0.1333, 0.0510, 0.0580, 0.0487, 0.0150, 0.0312, 0.0489, 0.0856,
        0.1060, 0.0835, 0.0481, 0.0461, 0.1201, 0.0880, 0.0533, 0.0435,0.0097, 0.0836, 0.0570, 0.0455, 0.0314, 0.0144, 0.0220, 0.0316, 0.0769,
        0.0628, 0.0502, 0.0353, 0.0335, 0.0650, 0.0955, 0.0367, 0.0309,0.0092, 0.0632, 0.0595, 0.0345, 0.0434, 0.0137, 0.0246, 0.0406, 0.0170,
        0.0950, 0.0453, 0.0675, 0.0443, 0.1056, 0.0863, 0.0262, 0.0250,0.0174, 0.2286, 0.0991, 0.0532, 0.0789, 0.0179, 0.0726, 0.1303, 0.0840,
        0.2243, 0.1409, 0.1890, 0.1665, 0.3649, 0.1072, 0.1122, 0.0451]
c = c *100
c = sorted(c)
c = torch.tensor(c)

s_qian=[]
for i in range(27000):
    s_qian.append(0)
# print(len(s_qian),s_qian)
s_hou = c[26999:-1]
# print(len(s_hou))
s = s_qian + s_hou.numpy().tolist()
s1 = s_qian + (s_hou*0.8).numpy().tolist()
average_loss = torch.mean(c,dim=[0])
# print(average_loss)
yf=1/(1+torch.exp(40*(-c+0.1)))
# print(yf)
d = yf * c
d_qian = d[0:35000]*0.8
d_hou = d[34999:-1]*0.5
d1=d_qian.numpy().tolist()+d_hou.numpy().tolist()
# plt.figure(1,figsize=(16,6))
print(len(c),len(s),len(d))
plt.plot(c, color="blue", linewidth=3.0, linestyle="--", label="MSE", alpha=0.9)  # 颜色 线宽 类型 标签 透明度
# plt.plot(c*0.9, color="blue", linewidth=3.0, linestyle="-", label="MSE", alpha=0.9)

plt.plot(s, "green", linewidth=3.0, linestyle="--",label="OHKM")  # r*:red *  颜色为红色，线型为*
# plt.plot(s1, "green", linewidth=3.0, linestyle="--",label="OHKM")

plt.plot(d, "red", linewidth=3.0, linestyle="--",label="Ours")
# plt.plot(d1, "red", linewidth=3.0, linestyle="--",label="Ours")
front1 = {'family' : 'Times New Roman',
        'weight' : 'normal',
        'size'   : 30,}
front2 = {'family' : 'Times New Roman',
        'weight' : 'normal',
        'size'   : 30,}
front3 = {'family' : 'SimHei',
        'weight' : 'normal',
        'size'   : 30,}

# plt.title("损失值统计图",front3)  # 标题
plt.xlabel("关键点索引",front3)
plt.ylabel('损失值',front3)

# 坐标轴的操作
# 坐标轴的位置
ax = plt.gca()  # 引入坐标轴
ax.spines["right"].set_color("none")
ax.spines["top"].set_color("none")
ax.spines["left"].set_position(("data", 0))
ax.spines["bottom"].set_position(("data", 0))

# 坐标轴的刻度显示位置
ax.xaxis.set_ticks_position("bottom")
ax.yaxis.set_ticks_position("left")

# 设置坐标的显示范围
plt.yticks(np.linspace(0, 0.4, 5, endpoint=True))  # 设置坐标的显示范围
# 设置刻度数字大小和边框
for lable in ax.get_xticklabels() + ax.get_yticklabels():
    lable.set_fontsize(25)  # 刻度大小
    lable.set_bbox(dict(facecolor="white", edgecolor="None", alpha=0.2))  # 刻度下面的小边框

# 图例
plt.legend(loc=(0.07,0.8),prop=front2)

# 网格线
# plt.grid()
foo_fig = plt.gcf()
foo_fig.savefig("cm.png",dpi = 600,bbox_inches="tight")
plt.show()

# def ssm_r_top():
#     ticks = [0.01, 0.05, 0.1, 0.15, 0.5, 1, 5, 10, 50, 100]
#     x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#     # x = [0.01, 0.05, 0.1, 0.15, 0.5,1, 5,10,50,100]
#     y = [80.62,81.45,83.55,81.90,82.31,82.03,79.52,78.69,73.59,70.59]
#     # plt.plot(x, y, label='SSM-r-top1')
#     # plt.plot(x, y, '.b')
#     plt.plot(c, color="blue", linewidth=3.0, linestyle="--", label="MSE", alpha=0.9)
#     plt.plot(s, "green", linewidth=3.0, linestyle="dashed", label="OHKM")
#     plt.plot(d1, "red", linewidth=3.0, linestyle="-", label="Ours")
#     # plt.xticks(x, ticks)
#     plt.xlabel("keypoints index", front2)
#     plt.ylabel('Loss value', front2)
#     plt.xlim([0,51000])
#     plt.ylim([0, 0.4])
#     plt.legend()
#
#     # plt调用gcf函数取得当前绘制的figure并调用savefig函数
#     foo_fig = plt.gcf()  # 'get current figure'
#     foo_fig.savefig('ssm_r_top.eps', format='eps', dpi=600)
#
#     plt.show()
#
# ssm_r_top()

# import numpy as np
# import matplotlib.pyplot as plt
# import random
# import torch
#
# c = [0.0168, 0.1970, 0.1064, 0.0775, 0.0828, 0.0154, 0.0412, 0.1178, 0.0859,
#        0.1793, 0.1327, 0.1043, 0.1377, 0.2248, 0.0880, 0.0869, 0.0484,0.0189, 0.2643, 0.0962, 0.0665, 0.1055, 0.0201, 0.0733, 0.1569, 0.0832,
#         0.2178, 0.1882, 0.1841, 0.1570, 0.3463, 0.1118, 0.1254, 0.0609,0.0172, 0.1409, 0.1298, 0.0598, 0.0923, 0.0179, 0.0425, 0.1375, 0.1142,
#         0.1659, 0.1278, 0.1320, 0.1909, 0.2120, 0.0994, 0.0803, 0.0374,0.0153, 0.1835, 0.0690, 0.0688, 0.0799, 0.0173, 0.0527, 0.1034, 0.0755,
#         0.1760, 0.1203, 0.1074, 0.0734, 0.2114, 0.1041, 0.0858, 0.0428,0.0198, 0.2429, 0.1114, 0.0750, 0.1121, 0.0196, 0.0724, 0.1614, 0.1121,
#         0.2140, 0.1872, 0.1919, 0.1742, 0.3346, 0.1093, 0.1258, 0.0594,0.0085, 0.0044, 0.0469, 0.0217, 0.0180, 0.0119, 0.0059, 0.0049, 0.0248,
#         0.0099, 0.0060, 0.0095, 0.0257, 0.0233, 0.0632, 0.0058, 0.0288,0.0117, 0.0744, 0.0938, 0.0432, 0.0623, 0.0175, 0.0272, 0.0669, 0.0655,
#         0.0984, 0.0533, 0.0725, 0.1232, 0.1204, 0.0883, 0.0533, 0.0230,0.0085, 0.0486, 0.0558, 0.0396, 0.0397, 0.0135, 0.0155, 0.0320, 0.0276,
#         0.0628, 0.0308, 0.0392, 0.0415, 0.0736, 0.0735, 0.0263, 0.0201,0.0124, 0.1326, 0.0464, 0.0619, 0.0445, 0.0128, 0.0286, 0.0437, 0.0794,
#         0.0924, 0.0791, 0.0436, 0.0319, 0.1091, 0.0789, 0.0501, 0.0371,0.0177, 0.2505, 0.0901, 0.0666, 0.0846, 0.0190, 0.0697, 0.1368, 0.0983,
#         0.2222, 0.1712, 0.1673, 0.1470, 0.3295, 0.1095, 0.1200, 0.0536,0.0163, 0.1651, 0.1317, 0.0750, 0.0956, 0.0180, 0.0491, 0.1125, 0.1201,
#         0.1701, 0.1353, 0.1088, 0.1715, 0.1963, 0.0932, 0.0911, 0.0454,0.0123, 0.1429, 0.0765, 0.0531, 0.0506, 0.0142, 0.0297, 0.0462, 0.0580,
#         0.1201, 0.0732, 0.0608, 0.0677, 0.1367, 0.0864, 0.0517, 0.0490,0.0134, 0.1556, 0.0839, 0.0699, 0.0651, 0.0142, 0.0412, 0.0717, 0.0793,
#         0.1356, 0.0987, 0.0697, 0.0565, 0.1479, 0.0776, 0.0663, 0.0431,0.0176, 0.1754, 0.0879, 0.0541, 0.0632, 0.0170, 0.0571, 0.1051, 0.0720,
#         0.2029, 0.1188, 0.1432, 0.1380, 0.2802, 0.1000, 0.0951, 0.0362,0.0176, 0.1754, 0.0879, 0.0541, 0.0632, 0.0170, 0.0571, 0.1051, 0.0720,
#         0.2029, 0.1188, 0.1432, 0.1380, 0.2802, 0.1000, 0.0951, 0.0362,0.0134, 0.1171, 0.0797, 0.0531, 0.0556, 0.0149, 0.0377, 0.0704, 0.0651,
#         0.1322, 0.0797, 0.0842, 0.0985, 0.1482, 0.0964, 0.0667, 0.0302,0.0138, 0.0403, 0.1049, 0.0416, 0.0651, 0.0166, 0.0244, 0.0874, 0.0810,
#         0.0927, 0.0793, 0.0833, 0.1603, 0.1036, 0.0983, 0.0380, 0.0226,0.0191, 0.2035, 0.1218, 0.0723, 0.1088, 0.0194, 0.0625, 0.1540, 0.1135,
#         0.1883, 0.1562, 0.1564, 0.1901, 0.2611, 0.1048, 0.1094, 0.0515,0.0200, 0.2043, 0.1367, 0.0839, 0.1136, 0.0193, 0.0610, 0.1479, 0.1390,
#         0.1912, 0.1652, 0.1324, 0.1942, 0.2423, 0.1049, 0.1066, 0.0567,0.0177, 0.1366, 0.1390, 0.0576, 0.0909, 0.0179, 0.0409, 0.1251, 0.0993,
#         0.1593, 0.1303, 0.1335, 0.1794, 0.1946, 0.0984, 0.0749, 0.0351,0.0138, 0.1410, 0.0865, 0.0577, 0.0646, 0.0160, 0.0413, 0.0814, 0.0788,
#         0.1395, 0.0992, 0.0829, 0.0948, 0.1407, 0.0921, 0.0681, 0.0337,0.0124, 0.1274, 0.0544, 0.0632, 0.0378, 0.0124, 0.0229, 0.0394, 0.0749,
#         0.0794, 0.0716, 0.0402, 0.0272, 0.0933, 0.0706, 0.0439, 0.0351,0.0169, 0.1736, 0.0812, 0.0720, 0.0673, 0.0163, 0.0428, 0.0839, 0.0936,
#         0.1613, 0.1072, 0.0770, 0.0852, 0.1729, 0.0968, 0.0772, 0.0483,0.0202, 0.2249, 0.1061, 0.0719, 0.0965, 0.0181, 0.0641, 0.1683, 0.1050,
#         0.2186, 0.1827, 0.1601, 0.1611, 0.2846, 0.0968, 0.1191, 0.0596,0.0156, 0.1378, 0.1026, 0.0556, 0.0763, 0.0170, 0.0446, 0.1039, 0.0852,
#         0.1665, 0.1068, 0.1029, 0.1054, 0.1714, 0.0901, 0.0758, 0.0361,0.0106, 0.0389, 0.0565, 0.0329, 0.0459, 0.0135, 0.0189, 0.0530, 0.0169,
#         0.0840, 0.0476, 0.0556, 0.0542, 0.0829, 0.0839, 0.0252, 0.0198,0.0135, 0.1333, 0.0510, 0.0580, 0.0487, 0.0150, 0.0312, 0.0489, 0.0856,
#         0.1060, 0.0835, 0.0481, 0.0461, 0.1201, 0.0880, 0.0533, 0.0435,0.0097, 0.0836, 0.0570, 0.0455, 0.0314, 0.0144, 0.0220, 0.0316, 0.0769,
#         0.0628, 0.0502, 0.0353, 0.0335, 0.0650, 0.0955, 0.0367, 0.0309,0.0092, 0.0632, 0.0595, 0.0345, 0.0434, 0.0137, 0.0246, 0.0406, 0.0170,
#         0.0950, 0.0453, 0.0675, 0.0443, 0.1056, 0.0863, 0.0262, 0.0250,0.0174, 0.2286, 0.0991, 0.0532, 0.0789, 0.0179, 0.0726, 0.1303, 0.0840,
#         0.2243, 0.1409, 0.1890, 0.1665, 0.3649, 0.1072, 0.1122, 0.0451]
# c = c *50
# c = sorted(c)
# c = torch.tensor(c)
#
#
#
# yf1=(np.exp(1*c)-1)/(np.exp(1*c)+1)
# d1 = yf1 * c
#
# yf2=(np.exp(15*c)-1)/(np.exp(15*c)+1)
# d2 = yf2 * c
#
# yf3=(np.exp(30*c)-1)/(np.exp(30*c)+1)
# d3 = yf3 * c
#
#
#
# plt.figure(1,figsize=(16,6))
# # print(len(c))
# plt.plot(c, color="blue", linewidth=3.0, linestyle="-", label="MSE", alpha=0.9)  # 颜色 线宽 类型 标签 透明度
# plt.plot(d1, color="red", linewidth=3.0, linestyle="-", label="γ=1", alpha=0.9)
# plt.plot(d2, "green", linewidth=3.0, linestyle="-",label="γ=20")  # r*:red *  颜色为红色，线型为*
# plt.plot(d3, "purple", linewidth=3.0, linestyle="-",label="γ=30")

front1 = {'family' : 'Times New Roman',
        'weight' : 'normal',
        'size'   : 30,}
front2 = {'family' : 'Times New Roman',
        'weight' : 'normal',
        'size'   : 16,}
front3 = {'family' : 'SimHei',
        'weight' : 'normal',
        'size'   : 16,}

# plt.title("损失值统计图",front3)  # 标题
# plt.xlabel("关键点索引",front3)
# plt.ylabel('损失值',front3)

# 坐标轴的操作
# 坐标轴的位置
# ax = plt.gca()  # 引入坐标轴
# ax.spines["right"].set_color("none")
# ax.spines["top"].set_color("none")
# ax.spines["left"].set_position(("data", 0))
# ax.spines["bottom"].set_position(("data", 0))

# 坐标轴的刻度显示位置
# ax.xaxis.set_ticks_position("bottom")
# ax.yaxis.set_ticks_position("left")
# import matplotlib
# matplotlib.rcParams['xtick.direction'] = 'in'
# matplotlib.rcParams['ytick.direction'] = 'in'
# 设置坐标的显示范围
# plt.yticks(np.linspace(0, 0.4, 5, endpoint=True))  # 设置坐标的显示范围
# 设置刻度数字大小和边框
# for lable in ax.get_xticklabels() + ax.get_yticklabels():
#     lable.set_fontsize(10)  # 刻度大小
#     lable.set_bbox(dict(facecolor="white", edgecolor="None", alpha=0.2))  # 刻度下面的小边框

# 图例
# plt.legend(loc=(0.07,0.6),prop=front2)

# 网格线
# plt.grid()
# plt.savefig("cm.png",dpi = 600,bbox_inches="tight")
# plt.show()

# def ssm_r_top():
#     # ticks = [0.01, 0.05, 0.1, 0.15, 0.5, 1, 5, 10, 50, 100]
#     # x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#     # x = [0.01, 0.05, 0.1, 0.15, 0.5,1, 5,10,50,100]
#     # y = [80.62,81.45,83.55,81.90,82.31,82.03,79.52,78.69,73.59,70.59]
#     # plt.plot(x, y, label='SSM-r-top1')
#     # plt.plot(x, y, '.b')
#     plt.plot(c, color="blue", linewidth=1.0, linestyle="-", label="MSE", alpha=0.9)  # 颜色 线宽 类型 标签 透明度
#     plt.plot(d1, color="red", linewidth=1.0, linestyle="-", label="γ=1", alpha=0.9)
#     plt.plot(d2, "green", linewidth=1.0, linestyle="-", label="γ=20")  # r*:red *  颜色为红色，线型为*
#     plt.plot(d3, "purple", linewidth=1.0, linestyle="-", label="γ=30")
#
#     plt.xlabel("Keypoints index", front2)
#     plt.ylabel('Loss value', front2)
#     plt.legend(loc=(0.07, 0.8), prop=front2)
#     plt.xlim([0, 25500])
#     plt.ylim([0, 0.4])
#     ax = plt.gca()
#     for lable in ax.get_xticklabels() + ax.get_yticklabels():
#         lable.set_fontsize(8)  # 刻度大小
#         lable.set_bbox(dict(facecolor="white", edgecolor="None", alpha=0.2))
#
#     # plt调用gcf函数取得当前绘制的figure并调用savefig函数
#     foo_fig = plt.gcf()  # 'get current figure'
#     foo_fig.savefig('ssm_r_top.jpg', format='jpg', dpi=600)
#
#     plt.show()
#
# ssm_r_top()
#
# def ssm_r_top1():
#     ticks = [0.01, 0.05, 0.1, 0.15, 0.5, 1, 5, 10, 50, 100]
#     x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#     # x = [0.01, 0.05, 0.1, 0.15, 0.5,1, 5,10,50,100]
#     y = [80.62,81.45,83.55,81.90,82.31,82.03,79.52,78.69,73.59,70.59]
#     plt.plot(x, y, label='SSM-r-top1')
#     plt.plot(x, y, '.b')
#     plt.xlabel("Keypoints index", front2)
#     plt.ylabel('Loss value', front2)
#     plt.legend(loc=(0.07, 0.8), prop=front2)
#     plt.xlim([0, 25])
#     plt.ylim([0, 0.4])
#     ax = plt.gca()
#     for lable in ax.get_xticklabels() + ax.get_yticklabels():
#         lable.set_fontsize(8)  # 刻度大小
#         lable.set_bbox(dict(facecolor="white", edgecolor="None", alpha=0.2))
#
#     # plt调用gcf函数取得当前绘制的figure并调用savefig函数
#     foo_fig = plt.gcf()  # 'get current figure'
#     foo_fig.savefig('ssm_r_top.jpg', format='jpg', dpi=600)
#
#     plt.show()
#
# ssm_r_top1()

# import numpy as np
# import matplotlib.pyplot as plt
# import random
#
# c = []
#
# plt.figure(1,figsize=(16,6))
#
# plt.plot(c, color="blue", linewidth=3.0, linestyle="--", label="MSE", alpha=0.9)  # 颜色 线宽 类型 标签 透明度
# # plt.plot(s, "green", linewidth=3.0, linestyle="dashed",label="OHKM")  # r*:red *  颜色为红色，线型为*
# # plt.plot(d, "red", linewidth=3.0, linestyle="dashed",label="Ours")
# front1 = {'family' : 'Times New Roman',
#         'weight' : 'normal',
#         'size'   : 30,}
# front2 = {'family' : 'Times New Roman',
#         'weight' : 'normal',
#         'size'   : 25,}
# plt.title("Loss statistics",front1)  # 标题
# plt.xlabel("Index of keypoints",front1)
# plt.ylabel('Loss',front1)
#
# # 坐标轴的操作
# # 坐标轴的位置
# ax = plt.gca()  # 引入坐标轴
# ax.spines["right"].set_color("none")
# ax.spines["top"].set_color("none")
# ax.spines["left"].set_position(("data", 0))
# ax.spines["bottom"].set_position(("data", 0))
#
# # 坐标轴的刻度显示位置
# ax.xaxis.set_ticks_position("bottom")
# ax.yaxis.set_ticks_position("left")
#
# # 设置坐标的显示范围
# plt.yticks(np.linspace(0, 0.4, 5, endpoint=True))  # 设置坐标的显示范围
# # 设置刻度数字大小和边框
# for lable in ax.get_xticklabels() + ax.get_yticklabels():
#     lable.set_fontsize(25)  # 刻度大小
#     lable.set_bbox(dict(facecolor="white", edgecolor="None", alpha=0.2))  # 刻度下面的小边框
#
# # 图例
# plt.legend(loc=(0.07,0.8),prop=front2)
#
# # 网格线
# # plt.grid()
# plt.savefig("cm.png",dpi = 300,bbox_inches="tight")
# plt.show()

# import matplotlib.pyplot as plt
# import numpy as np
#
#
# # x = [0, 0.5, 1, 1.5, 2.0, 2.5, 3, 3.5, 4, 4.5, 5]
# # y = [0,0.45,0.55,0.90,0.31,0.03,0.52,0.69,0.59,0.59]
# x = np.arange(0, 0.6, 0.05)
# # y = 2.0 / (1 + np.power(np.e, -2 * x)) - 1
# y = ((np.exp(20*x)-1) / (np.exp(20*x)+1))
#
# import matplotlib
# matplotlib.rcParams['xtick.direction'] = 'in'
# matplotlib.rcParams['ytick.direction'] = 'in'
# '''
# plt.plot(Abscissa, ordinate,"bo-",linewidth="",markersize="",label="")
# "bo-":The shape of the point of the curve
# linewidth:The distance from the point on the curve
# markersize:The size of the point on the curve
# label:Description of the curve
# '''
# plt.plot(x,y,"ko-",linewidth=2,markersize=8)
#
# #Label corresponding to horizontal and vertical coordinates
# plt.ylabel("权重",front3)
# plt.xlabel("损失值",front3)
#
#
# plt.axis([0,0.6,0,1.1])                #plt.axis([xmin,xmax,ymin,ymax])
# ax = plt.gca()
# for lable in ax.get_xticklabels() + ax.get_yticklabels():
#     lable.set_fontsize(10)  # 刻度大小
#
# # plt.legend(loc="upper left")
# plt.savefig("hard.jpg",dpi = 600,bbox_inches="tight")
# plt.show()


# import matplotlib.pyplot as plt
# import numpy as np
#
# # x = [0, 0.5, 1, 1.5, 2.0, 2.5, 3, 3.5, 4, 4.5, 5]
# # y = [0,0.45,0.55,0.90,0.31,0.03,0.52,0.69,0.59,0.59]
# x = np.arange(0, 0.6, 0.05)
# y = ((np.exp(20*x)-1) / (np.exp(20*x)+1))
#
# import numpy as np
# import matplotlib.pyplot as plt
# import random
# import torch
#
# c = [0.0168, 0.1970, 0.1064, 0.0775, 0.0828, 0.0154, 0.0412, 0.1178, 0.0859,
#        0.1793, 0.1327, 0.1043, 0.1377, 0.2248, 0.0880, 0.0869, 0.0484,0.0189, 0.2643, 0.0962, 0.0665, 0.1055, 0.0201, 0.0733, 0.1569, 0.0832,
#         0.2178, 0.1882, 0.1841, 0.1570, 0.3463, 0.1118, 0.1254, 0.0609,0.0172, 0.1409, 0.1298, 0.0598, 0.0923, 0.0179, 0.0425, 0.1375, 0.1142,
#         0.1659, 0.1278, 0.1320, 0.1909, 0.2120, 0.0994, 0.0803, 0.0374,0.0153, 0.1835, 0.0690, 0.0688, 0.0799, 0.0173, 0.0527, 0.1034, 0.0755,
#         0.1760, 0.1203, 0.1074, 0.0734, 0.2114, 0.1041, 0.0858, 0.0428,0.0198, 0.2429, 0.1114, 0.0750, 0.1121, 0.0196, 0.0724, 0.1614, 0.1121,
#         0.2140, 0.1872, 0.1919, 0.1742, 0.3346, 0.1093, 0.1258, 0.0594,0.0085, 0.0044, 0.0469, 0.0217, 0.0180, 0.0119, 0.0059, 0.0049, 0.0248,
#         0.0099, 0.0060, 0.0095, 0.0257, 0.0233, 0.0632, 0.0058, 0.0288,0.0117, 0.0744, 0.0938, 0.0432, 0.0623, 0.0175, 0.0272, 0.0669, 0.0655,
#         0.0984, 0.0533, 0.0725, 0.1232, 0.1204, 0.0883, 0.0533, 0.0230,0.0085, 0.0486, 0.0558, 0.0396, 0.0397, 0.0135, 0.0155, 0.0320, 0.0276,
#         0.0628, 0.0308, 0.0392, 0.0415, 0.0736, 0.0735, 0.0263, 0.0201,0.0124, 0.1326, 0.0464, 0.0619, 0.0445, 0.0128, 0.0286, 0.0437, 0.0794,
#         0.0924, 0.0791, 0.0436, 0.0319, 0.1091, 0.0789, 0.0501, 0.0371,0.0177, 0.2505, 0.0901, 0.0666, 0.0846, 0.0190, 0.0697, 0.1368, 0.0983,
#         0.2222, 0.1712, 0.1673, 0.1470, 0.3295, 0.1095, 0.1200, 0.0536,0.0163, 0.1651, 0.1317, 0.0750, 0.0956, 0.0180, 0.0491, 0.1125, 0.1201,
#         0.1701, 0.1353, 0.1088, 0.1715, 0.1963, 0.0932, 0.0911, 0.0454,0.0123, 0.1429, 0.0765, 0.0531, 0.0506, 0.0142, 0.0297, 0.0462, 0.0580,
#         0.1201, 0.0732, 0.0608, 0.0677, 0.1367, 0.0864, 0.0517, 0.0490,0.0134, 0.1556, 0.0839, 0.0699, 0.0651, 0.0142, 0.0412, 0.0717, 0.0793,
#         0.1356, 0.0987, 0.0697, 0.0565, 0.1479, 0.0776, 0.0663, 0.0431,0.0176, 0.1754, 0.0879, 0.0541, 0.0632, 0.0170, 0.0571, 0.1051, 0.0720,
#         0.2029, 0.1188, 0.1432, 0.1380, 0.2802, 0.1000, 0.0951, 0.0362,0.0176, 0.1754, 0.0879, 0.0541, 0.0632, 0.0170, 0.0571, 0.1051, 0.0720,
#         0.2029, 0.1188, 0.1432, 0.1380, 0.2802, 0.1000, 0.0951, 0.0362,0.0134, 0.1171, 0.0797, 0.0531, 0.0556, 0.0149, 0.0377, 0.0704, 0.0651,
#         0.1322, 0.0797, 0.0842, 0.0985, 0.1482, 0.0964, 0.0667, 0.0302,0.0138, 0.0403, 0.1049, 0.0416, 0.0651, 0.0166, 0.0244, 0.0874, 0.0810,
#         0.0927, 0.0793, 0.0833, 0.1603, 0.1036, 0.0983, 0.0380, 0.0226,0.0191, 0.2035, 0.1218, 0.0723, 0.1088, 0.0194, 0.0625, 0.1540, 0.1135,
#         0.1883, 0.1562, 0.1564, 0.1901, 0.2611, 0.1048, 0.1094, 0.0515,0.0200, 0.2043, 0.1367, 0.0839, 0.1136, 0.0193, 0.0610, 0.1479, 0.1390,
#         0.1912, 0.1652, 0.1324, 0.1942, 0.2423, 0.1049, 0.1066, 0.0567,0.0177, 0.1366, 0.1390, 0.0576, 0.0909, 0.0179, 0.0409, 0.1251, 0.0993,
#         0.1593, 0.1303, 0.1335, 0.1794, 0.1946, 0.0984, 0.0749, 0.0351,0.0138, 0.1410, 0.0865, 0.0577, 0.0646, 0.0160, 0.0413, 0.0814, 0.0788,
#         0.1395, 0.0992, 0.0829, 0.0948, 0.1407, 0.0921, 0.0681, 0.0337,0.0124, 0.1274, 0.0544, 0.0632, 0.0378, 0.0124, 0.0229, 0.0394, 0.0749,
#         0.0794, 0.0716, 0.0402, 0.0272, 0.0933, 0.0706, 0.0439, 0.0351,0.0169, 0.1736, 0.0812, 0.0720, 0.0673, 0.0163, 0.0428, 0.0839, 0.0936,
#         0.1613, 0.1072, 0.0770, 0.0852, 0.1729, 0.0968, 0.0772, 0.0483,0.0202, 0.2249, 0.1061, 0.0719, 0.0965, 0.0181, 0.0641, 0.1683, 0.1050,
#         0.2186, 0.1827, 0.1601, 0.1611, 0.2846, 0.0968, 0.1191, 0.0596,0.0156, 0.1378, 0.1026, 0.0556, 0.0763, 0.0170, 0.0446, 0.1039, 0.0852,
#         0.1665, 0.1068, 0.1029, 0.1054, 0.1714, 0.0901, 0.0758, 0.0361,0.0106, 0.0389, 0.0565, 0.0329, 0.0459, 0.0135, 0.0189, 0.0530, 0.0169,
#         0.0840, 0.0476, 0.0556, 0.0542, 0.0829, 0.0839, 0.0252, 0.0198,0.0135, 0.1333, 0.0510, 0.0580, 0.0487, 0.0150, 0.0312, 0.0489, 0.0856,
#         0.1060, 0.0835, 0.0481, 0.0461, 0.1201, 0.0880, 0.0533, 0.0435,0.0097, 0.0836, 0.0570, 0.0455, 0.0314, 0.0144, 0.0220, 0.0316, 0.0769,
#         0.0628, 0.0502, 0.0353, 0.0335, 0.0650, 0.0955, 0.0367, 0.0309,0.0092, 0.0632, 0.0595, 0.0345, 0.0434, 0.0137, 0.0246, 0.0406, 0.0170,
#         0.0950, 0.0453, 0.0675, 0.0443, 0.1056, 0.0863, 0.0262, 0.0250,0.0174, 0.2286, 0.0991, 0.0532, 0.0789, 0.0179, 0.0726, 0.1303, 0.0840,
#         0.2243, 0.1409, 0.1890, 0.1665, 0.3649, 0.1072, 0.1122, 0.0451]
# c = c *50
# c = sorted(c)
# c = torch.tensor(c)
#
# yf1=(np.exp(1*c)-1)/(np.exp(1*c)+1)
# d1 = yf1 * c
#
# yf2=(np.exp(15*c)-1)/(np.exp(15*c)+1)
# d2 = yf2 * c
#
# yf3=(np.exp(30*c)-1)/(np.exp(30*c)+1)
# d3 = yf3 * c
#
# import matplotlib
# matplotlib.rcParams['xtick.direction'] = 'in'
# matplotlib.rcParams['ytick.direction'] = 'in'
# '''
# plt.plot(Abscissa, ordinate,"bo-",linewidth="",markersize="",label="")
# "bo-":The shape of the point of the curve
# linewidth:The distance from the point on the curve
# markersize:The size of the point on the curve
# label:Description of the curve
# '''
# # plt.plot(x,y,"ko-",linewidth=2,markersize=8)
# print(len(c))
# plt.plot(c, color="blue", linewidth=2.0, linestyle="-", label="MSE", alpha=0.9)  # 颜色 线宽 类型 标签 透明度
# plt.plot(d1, color="red", linewidth=2.0, linestyle="-", label="γ=1", alpha=0.9)
# plt.plot(d2, "green", linewidth=2.0, linestyle="-",label="γ=20")  # r*:red *  颜色为红色，线型为*
# plt.plot(d3, "purple", linewidth=2.0, linestyle="-",label="γ=30")
# #Label corresponding to horizontal and vertical coordinates
# plt.ylabel("损失值",front3)
# plt.xlabel("关键点索引",front3)
# # my_x_ticks = np.arange(0, 25501, 5000)
# # my_y_ticks = np.arange(0, 0.41, 0.1)
# # plt.xticks(my_x_ticks)
# # plt.yticks(my_y_ticks)
# plt.axis([0,25555,0,0.451])                #plt.axis([xmin,xmax,ymin,ymax])
#
# ax = plt.gca()
# for lable in ax.get_xticklabels() + ax.get_yticklabels():
#     lable.set_fontsize(10)  # 刻度大小
#
# plt.legend(loc="upper left")
# plt.savefig("hard.jpg",dpi = 600,bbox_inches="tight")
# plt.show()

# import matplotlib.pyplot as plt
# import numpy as np
# x =  np.arange(0, 32, 2)
# y = [75.1, 73.6, 74.0, 74.6, 75.0, 75.2, 75.3, 75.5, 75.8, 75.8, 75.9, 76.0, 76.4, 76.2, 76.1, 75.1]
# import matplotlib
# matplotlib.rcParams['xtick.direction'] = 'in'
# matplotlib.rcParams['ytick.direction'] = 'in'
# '''
# plt.plot(Abscissa, ordinate,"bo-",linewidth="",markersize="",label="")
# "bo-":The shape of the point of the curve
# linewidth:The distance from the point on the curve
# markersize:The size of the point on the curve
# label:Description of the curve
# '''
# plt.plot(x,y,"ko-",linewidth=2,markersize=8)
#
# #Label corresponding to horizontal and vertical coordinates
# plt.ylabel("mAP/%",front2)
# plt.xlabel("γ取值",front3)
#
# # plt.axis([0,32,70,80])                #plt.axis([xmin,xmax,ymin,ymax])
# my_x_ticks = np.arange(0, 32, 2)
# my_y_ticks = [0,73,74,75,76,77]
# plt.xticks(my_x_ticks)
# plt.yticks([71,73,74,75,76,77],['0','73','74','75','76','77'])
#
# ax = plt.gca()
# for lable in ax.get_xticklabels() + ax.get_yticklabels():
#     lable.set_fontsize(10)  # 刻度大小
#
# # plt.legend(loc="upper left")
# plt.savefig("d.jpg",dpi = 600,bbox_inches="tight")
# plt.show()